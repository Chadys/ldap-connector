"""
Django settings for ldap-connector project.

Generated by 'django-admin startproject' using Django 3.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
from decimal import Decimal

import sentry_sdk

from .partials_settings.base import *  # noqa
from .partials_settings.file import *  # noqa
from .partials_settings.ldap import *  # noqa
from .partials_settings.security import *  # noqa

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# Application definition

INSTALLED_APPS = ["corsheaders", "applications.ftp_integration"]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "csp.middleware.CSPMiddleware",
    "django.middleware.http.ConditionalGetMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "configurations.urls"
TEMPLATES = []

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "data" / "db.sqlite3",
    }
}

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Logging Configuration

# Get loglevel from env
LOGLEVEL = env.str("LOGLEVEL", default="WARNING").upper()
SQL_LOGLEVEL = env.str("SQL_LOGLEVEL", default=LOGLEVEL).upper()
LOG_FORMAT = env.str(
    "LOG_FORMAT",
    default="[{levelname}] <{asctime}> {pathname}:{lineno} {message}",
)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {"class": "logging.StreamHandler", "formatter": "verbose"},
    },
    "formatters": {
        "verbose": {
            "format": LOG_FORMAT,
            "style": "{",
        },
    },
    "loggers": {
        # root logger, for third party and such
        "": {
            "level": LOGLEVEL,
            "handlers": [
                "console",
            ],
        },
        "django": {
            "level": LOGLEVEL,
            "handlers": ["console"],
            # required to avoid double logging with root logger
            "propagate": False,
        },
        # django database logs
        "django.db.backends": {
            "level": SQL_LOGLEVEL,
            "handlers": ["console"],
            "propagate": False,
        },
    },
}

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "fr-fr"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

USE_THOUSAND_SEPARATOR = True

LANGUAGES = (
    ("en-gb", "British English"),
    ("fr", "French"),
)

LANGUAGE_COOKIE_SAMESITE = "Lax"
LANGUAGE_COOKIE_SECURE = True


SENTRY_DSN = env.str("SENTRY_DSN", default=None)
SENTRY_TRACES_SAMPLE_RATE = env.float("SENTRY_TRACES_SAMPLE_RATE", default=0.0)
SENTRY_DEBUG = env.bool("SENTRY_DEBUG", default=DEBUG)
if SENTRY_DSN and ENV_MODE != EnvMode.TEST:
    # SENTRY_DSN and SENTRY_ENVIRONMENT is read directly in env var by init
    sentry_sdk.init(
        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for performance monitoring.
        # We recommend adjusting this value in production.
        traces_sample_rate=SENTRY_TRACES_SAMPLE_RATE,
        # If you wish to associate users to errors (assuming you are using
        # django.contrib.auth) you may enable sending PII data.
        send_default_pii=True,
        debug=SENTRY_DEBUG,
    )
